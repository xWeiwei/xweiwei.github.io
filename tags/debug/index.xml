<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Debug on 未知的世界</title>
    <link>https://xweiwei.github.io/tags/debug/</link>
    <description>Recent content in Debug on 未知的世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>2016 - 2017</copyright>
    <lastBuildDate>Thu, 04 May 2017 22:03:15 +0800</lastBuildDate>
    
	<atom:link href="https://xweiwei.github.io/tags/debug/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android内核调试</title>
      <link>https://xweiwei.github.io/post/kernel_debug/</link>
      <pubDate>Thu, 04 May 2017 22:03:15 +0800</pubDate>
      
      <guid>https://xweiwei.github.io/post/kernel_debug/</guid>
      <description>在分析Linux的内核CVE，或者是编写相关的POC，有时候可能结果与预期不太符合，这个时候就需要查看内核的运行过程。
KGDB kgdb提供了一种使用 gdb调试 Linux 内核的机制。使用KGDB可以象调试普通的应用程序那样，在内核中进行设置断点、检查变量值、单步跟踪程序运行等操作。
编译内核 首先是去https://source.android.com/source/building-kernels下载对应的内核源代码。
msm对应大部分的nexus以及pixel手机  git clone https://android.googlesource.com/kernel/msm.git 
下面以nexus5x(bullhead)为例子,生成一个.config
$ export ARCH=arm64 $ export CROSS_COMPILE=aarch64-linux-android- $ cd msm $ git checkout android-msm-bullhead-3.10-nougat $ make bullhead_defconfig  然后配置.config
$ make menuconfig  主要开启
[*] Kernel hacking [*] Compile the kernel with debug info [*] KGDB: kernel debugging with remote gdb —&amp;gt; [*] Enable dynamic printk() call support  编译得到的arch/arm64/boot/Image
GDB调试 模拟器启动 emulator -verbose -show-kernel -netfast -avd -avd Pixel_API_25 -kernel arch/arm64/boot/Image -qemu -gdb tcp::1234,ipv4 -S</description>
    </item>
    
  </channel>
</rss>